import org.springframework.boot.gradle.plugin.SpringBootPlugin

apply plugin: 'groovy'

sourceCompatibility = 11
targetCompatibility = 11

ext {
    set("saturnStarterVersion", "2.4.15-SNAPSHOT")
    set("mapstructVersion", "1.4.2.Final")
    set("lombokVersion", "1.18.24")
    set("springCloudVersion", '2020.0.5')
    set('resilience4jVersion', "1.7.0")
    set("springSpockVersion", "2.3-groovy-4.0")
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    //springboot starter core
    implementation platform(SpringBootPlugin.BOM_COORDINATES)
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'

    //ebaykorea standard core
    implementation "com.ebaykorea.saturn:saturn-spring-boot-starter-ebaykr:${saturnStarterVersion}"
    implementation "com.ebaykorea.saturn:saturn-spring-boot-starter-circuitbreaker:${saturnStarterVersion}"
    implementation "com.ebaykorea.saturn:saturn-spring-boot-starter-datasource:${saturnStarterVersion}"
    implementation "com.ebaykorea.saturn:saturn-spring-boot-starter-moa:${saturnStarterVersion}"
    implementation "com.ebaykorea.saturn:saturn-spring-boot-starter-mssql:${saturnStarterVersion}"
    implementation "io.github.openfeign:feign-jackson"

    //third party library
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    implementation 'com.google.code.gson:gson'
    implementation 'com.google.guava:guava:26.0-jre'
    implementation "io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-feign:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-annotations:${resilience4jVersion}"

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.spockframework:spock-core:${springSpockVersion}"
    testImplementation "org.spockframework:spock-spring:${springSpockVersion}"
    testImplementation 'it.ozimov:embedded-redis:0.7.2'
}
